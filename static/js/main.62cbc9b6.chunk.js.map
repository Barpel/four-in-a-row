{"version":3,"sources":["components/NavBar/NavBar.js","components/PlayerOpts/PlayerOpts.js","components/GameOpts/index.js","components/GameOpts/GameOpts.js","components/Cell/index.js","components/Cell/Cell.js","components/Row/Row.js","components/GameBoard/index.js","components/GameBoard/GameBoard.js","components/GamePanel/index.js","components/GamePanel/GamePanel.js","pages/GamePage/GamePage.js","pages/AboutPage/index.js","pages/AboutPage/AboutPage.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","NavLink","to","exact","activeClassName","PlayerOpts","_ref","player","handleChange","disabled","number","type","value","name","placeholder","onChange","ev","color","GameOpts","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","modeSelected","optsSubmitted","pcMode","player1","player2","playerNum","setState","objectSpread","defineProperty","target","handleSubmit","preventDefault","stateToEmit","props","onOptsSubmitted","alert","inherits","createClass","key","_this2","_this$state","onClick","index_es","icon","faUserFriends","faLaptop","onSubmit","components_PlayerOpts_PlayerOpts","Component","Cell","onCellClicked","col","style","backgroundColor","Row","row","playerColors","map","cell","idx","components_Cell","GameBoard","board","components_Row_Row","GamePanel","players","msg","currPlayer","onRestart","faRedo","faUserNinja","GamePage","rows","cols","isGameOn","isVictory","successionForVictory","initBoard","createBoard","i","push","j","handleOptsSubmit","opts","setTimeout","handleCellClicked","copyBoard","JSON","parse","stringify","findFreeRow","nextPlayer","togglePlayer","checkVictory","winningPlayer","checkGameTie","randomInt","getRandomIntInclusive","min","max","Math","ceil","floor","random","checkSuccessionCol","res","checkSuccessionRow","filledCells","checkSuccessionDiagonal1","checkSuccessionDiagonal2","Boolean","_this$state2","components_GameOpts","components_GamePanel","components_GameBoard","player1Color","player2Color","AboutPage","App","BrowserRouter","components_NavBar_NavBar","Switch","Route","path","component","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6ZAyBeA,SArBA,WACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,KACRL,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WADpB,WAEYH,EAAAC,EAAAC,cAAA,WAFZ,UAKJF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,IAAIC,OAAK,EAACC,gBAAgB,UAAtC,SAEJP,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,SAASE,gBAAgB,UAArC,qDCKLC,SArBI,SAAAC,GAAwC,IAArCC,EAAqCD,EAArCC,OAAQC,EAA6BF,EAA7BE,aAAcC,EAAeH,EAAfG,SACxC,OACIZ,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,oBAAYQ,EAAOG,QACnBb,EAAAC,EAAAC,cAAA,SAAOY,KAAK,OACRC,MAAOL,EAAOM,KACdA,KAAK,OACLC,YAAY,OACZC,SAAU,SAACC,GAAD,OAAQR,EAAaQ,EAAIT,EAAOG,SAC1CD,SAAUA,IAGdZ,EAAAC,EAAAC,cAAA,SAAOY,KAAK,QACRE,KAAK,QACLD,MAAOL,EAAOU,MACdF,SAAU,SAACC,GAAD,OAAQR,EAAaQ,EAAIT,EAAOG,cChB3CQ,ECKf,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACIQ,MAAQ,CACJC,cAAc,EACdC,eAAe,EACfC,QAAQ,EACRC,QAAS,CAAE9B,OAAQ,EAAGG,KAAM,GAAII,MAAO,WACvCwB,QAAS,CAAE/B,OAAQ,EAAGG,KAAM,WAAYI,MAAO,YANvDI,EASIb,aAAe,SAACQ,EAAI0B,GAChB,IAAInC,EAAuB,IAAdmC,EAAkB,UAAY,UAC3CrB,EAAKsB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GACOD,EAAKe,MADZd,OAAAuB,EAAA,EAAAvB,CAAA,GAEKf,EAFLe,OAAAsB,EAAA,EAAAtB,CAAA,GAGWD,EAAKe,MAAM7B,GAHtBe,OAAAuB,EAAA,EAAAvB,CAAA,GAISN,EAAG8B,OAAOjC,KAAOG,EAAG8B,OAAOlC,YAf5CS,EAoBI0B,aAAe,SAAC/B,GAEZ,GADAA,EAAGgC,iBACE3B,EAAKe,MAAMI,QAAQ3B,MAASQ,EAAKe,MAAMK,QAAQ5B,OAAUQ,EAAKe,MAAMG,QAAsC,aAA5BlB,EAAKe,MAAMK,QAAQ5B,MACjG,CACDQ,EAAKsB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GAAmBD,EAAKe,MAAxB,CAA+BE,eAAe,KAC9C,IAAIW,EAAc,CACdV,OAAQlB,EAAKe,MAAMG,OACnBC,QAASnB,EAAKe,MAAMI,QACpBC,QAASpB,EAAKe,MAAMK,QACpBH,eAAe,GAEnBjB,EAAK6B,MAAMC,gBAAgBF,QAT6FG,MAAM,oCAtB1I/B,EAAA,OAAAC,OAAA+B,EAAA,EAAA/B,CAAAJ,EAAAC,GAAAG,OAAAgC,EAAA,EAAAhC,CAAAJ,EAAA,EAAAqC,IAAA,SAAA3C,MAAA,WAkCa,IAAA4C,EAAAhC,KAAAiC,EAC6DjC,KAAKY,MAA/DC,EADHoB,EACGpB,aAAcG,EADjBiB,EACiBjB,QAASC,EAD1BgB,EAC0BhB,QAASF,EADnCkB,EACmClB,OAAQD,EAD3CmB,EAC2CnB,cAChD,OACIzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAGNqC,GACDxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBACd0D,QAAS,kBAAMF,EAAKb,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GAAmBkC,EAAKpB,MAAxB,CAA+BG,QAAQ,EAAOF,cAAc,OAC3ExC,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAiBC,KAAMC,OAE3BhE,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBACd0D,QAAS,kBAAMF,EAAKb,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GAAmBkC,EAAKpB,MAAxB,CAA+BG,QAAQ,EAAMF,cAAc,OAC1ExC,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAiBC,KAAME,OAE3BjE,EAAAC,EAAAC,cAAA,uBAKJsC,IAAiBC,GACjBzC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAY+D,SAAUvC,KAAKuB,cAEvClD,EAAAC,EAAAC,cAACiE,EAAD,CAAYzD,OAAQiC,EAAShC,aAAcgB,KAAKhB,eAChDX,EAAAC,EAAAC,cAACiE,EAAD,CAAYzD,OAAQkC,EAASjC,aAAcgB,KAAKhB,aAC5CC,SAAU8B,IAGd1C,EAAAC,EAAAC,cAAA,UAAQY,KAAK,UAAb,cAjExBO,EAAA,CAA8B+C,aCLfC,SCEF,SAAA5D,GAAmC,IAAhC6D,EAAgC7D,EAAhC6D,cAAeC,EAAiB9D,EAAjB8D,IAAKnD,EAAYX,EAAZW,MAChC,OACIpB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAO0D,QAAS,kBAAMS,EAAcC,KAC9CvE,EAAAC,EAAAC,cAAA,OAAKsE,MAAO,CAAEC,gBAAiBrD,GAASjB,UAAqB,UAAViB,EAAoB,WAAa,WACpFpB,EAAAC,EAAAC,cAAA,OAAKC,UAAqB,UAAViB,EAAoB,mBAAqB,8BCKtDsD,EATH,SAAAjE,GAA0C,IAAvCkE,EAAuClE,EAAvCkE,IAAKL,EAAkC7D,EAAlC6D,cAAeM,EAAmBnE,EAAnBmE,aAE/B,OACI5E,EAAAC,EAAAC,cAAA,UACKyE,EAAIE,IAAI,SAACC,EAAMC,GAAP,OAAe/E,EAAAC,EAAAC,cAAC8E,EAAD,CAAMtB,IAAKqB,EAAKT,cAAeA,EAAeC,IAAKQ,EAAK3D,MAAO0D,EAAOF,EAAY,SAAAtC,OAAUwC,EAAV,UAAyB,cCNhIG,SCGG,SAAAxE,GAA4C,IAAzCyE,EAAyCzE,EAAzCyE,MAAOZ,EAAkC7D,EAAlC6D,cAAeM,EAAmBnE,EAAnBmE,aACvC,OACI5E,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cACbH,EAAAC,EAAAC,cAAA,aACKgF,EAAML,IAAI,SAACF,EAAKI,GAAN,OACP/E,EAAAC,EAAAC,cAACiF,EAAD,CAAKzB,IAAKqB,EACNJ,IAAKA,EACLL,cAAeA,EACfM,aAAcA,UCXvBQ,SCIG,SAAA3E,GAA6C,IAA1C4E,EAA0C5E,EAA1C4E,QAASC,EAAiC7E,EAAjC6E,IAAKC,EAA4B9E,EAA5B8E,WAAYC,EAAgB/E,EAAhB+E,UAC3C,OACIxF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEXH,EAAAC,EAAAC,cAAA,MAAIsE,MAAO,CAAEpD,MAAOiE,EAAQ1C,QAAQvB,QAC/BiE,EAAQ1C,QAAQ3B,MAGrBhB,EAAAC,EAAAC,cAAA,MAAIsE,MAAO,CAAEpD,MAAOiE,EAAQzC,QAAQxB,QAC/BiE,EAAQzC,QAAQ5B,MAGrBhB,EAAAC,EAAAC,cAAA,UAAQ2D,QAAS2B,GACbxF,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAiBC,KAAM0B,OAG3BzF,EAAAC,EAAAC,cAAA,MAAIsE,MAAO,CAAEpD,MAAOiE,EAAO,SAAA/C,OAAUiD,IAAcnE,QAC9CiE,EAAO,SAAA/C,OAAUiD,IAAcvE,KADpC,UAEIhB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAiBC,KAAM2B,OAGvBJ,GACAtF,EAAAC,EAAAC,cAAA,UAAKoF,MCtBAK,6MACjBpD,MAAQ,CACJqD,KAAM,EACNC,KAAM,EACNlD,QAAS,GACTC,QAAS,GACTF,QAAQ,EACRD,eAAe,EACfqD,UAAU,EACVC,WAAW,EACXb,MAAO,GACPK,WAAY,EACZS,qBAAsB,EACtBV,IAAK,MAGTW,UAAY,WAAM,IAAArC,EACSpC,EAAKe,MAApBqD,EADMhC,EACNgC,KAAMC,EADAjC,EACAiC,KACRX,EAAQ1D,EAAK0E,YAAYN,EAAMC,GACrCrE,EAAKsB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GAAmBD,EAAKe,MAAxB,CAA+B2C,QAAOK,WAAY,EAAGO,UAAU,EAAMR,IAAK,GAAIS,WAAW,QAG7FG,YAAc,SAACN,EAAMC,GAEjB,IADA,IAAMX,EAAQ,GACLiB,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC3BjB,EAAMkB,KAAK,IACX,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAMQ,IACtBnB,EAAMiB,GAAGE,GAAK,KAGtB,OAAOnB,KAGXoB,iBAAmB,SAACC,GAChB/E,EAAKsB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GAAmBD,EAAKe,MAAUgE,IAClCC,WAAW,WACPhF,EAAKyE,aACN,MAGPQ,kBAAoB,SAAClC,GACjB/C,EAAKsB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GAAmBD,EAAKe,QACxB,IAAImE,EAAYC,KAAKC,MAAMD,KAAKE,UAAUrF,EAAKe,MAAM2C,QAEjDP,EAAMnD,EAAKsF,YAAYJ,EAAWnC,GACtC,GAAII,GAAO,IAAM+B,EAAU/B,GAAKJ,KAAS/C,EAAKe,MAAMwD,WAAavE,EAAKe,MAAMuD,SAAU,CAElFY,EAAU/B,GAAKJ,GAAO/C,EAAKe,MAAMgD,WAEjC,IAAIwB,EAAavF,EAAKwF,aAAaxF,EAAKe,MAAMgD,YAG9C,GADkB/D,EAAKyF,aAAaP,EAAW/B,EAAKJ,EAAK/C,EAAKe,MAAMgD,YACrD,CACX,IAAM2B,EAA0C,IAA1B1F,EAAKe,MAAMgD,WAAmB/D,EAAKe,MAAMI,QAAUnB,EAAKe,MAAMK,QAEpFpB,EAAKsB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GACOD,EAAKe,MADZ,CAEI2C,MAAOwB,EACPZ,UAAU,EACVC,WAAW,EACXT,IAAG,sBAAAhD,OAAc4E,EAAcrG,OAA5B,OAAAyB,OAAwC4E,EAAclG,KAAtD,6BAGJ,CACgBQ,EAAK2F,aAAaT,EAAWlF,EAAKe,MAAMqD,KAAMpE,EAAKe,MAAMsD,MAExErE,EAAKsB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GAAmBD,EAAKe,MAAxB,CAA+BuD,UAAU,EAAOC,WAAW,EAAOT,IAAK,oBAEvE9D,EAAKsB,SAALrB,OAAAsB,EAAA,EAAAtB,CAAA,GAAmBD,EAAKe,MAAxB,CAA+B2C,MAAOwB,EAAWnB,WAAYwB,KAE1C,IAAfA,GAAoBvF,EAAKe,MAAMG,QAC/B8D,WAAW,WACP,IAAIY,EAAY5F,EAAK6F,sBAAsB,EAAG7F,EAAKe,MAAMsD,KAAO,GAChErE,EAAKiF,kBAAkBW,IACxB,WAuCvBC,sBAAwB,SAACC,EAAKC,GAG1B,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,KAuBzDM,mBAAqB,SAAC1C,EAAOP,EAAKJ,EAAK7D,GAInC,IAJ8C,IACtCsF,EAAyBxE,EAAKe,MAA9ByD,qBAEJ6B,EAAM,EACD1B,EAAIxB,EAAKwB,EAAIxB,EAAMqB,EAAsBG,IAC9C0B,GAAO3C,EAAMiB,IAAMjB,EAAMiB,GAAG5B,KAAS7D,EAEzC,OAAOmH,IAAQ7B,KAGnB8B,mBAAqB,SAAC5C,EAAOP,EAAKJ,EAAK7D,GAGnC,IAH8C,IACtCsF,EAAyBxE,EAAKe,MAA9ByD,qBACJ6B,EAAM,EACD1B,EAAI5B,EAAK4B,EAAI5B,EAAMyB,EAAsBG,IAC9C0B,GAAO3C,EAAMP,IAAQO,EAAMP,GAAKwB,KAAOzF,EAE3C,OAAOmH,IAAQ7B,KAGnBc,YAAc,SAAC5B,EAAOX,GAAQ,IAEpBqB,EAASpE,EAAKe,MAAdqD,KAEN,IADAA,GAAQ,EACDV,EAAMU,GAAMrB,IAAQqB,EAAO,GAC9BA,IAEJ,OAAOA,KAGXoB,aAAe,SAACzB,GACZ,OAAmB,IAAfA,EAAyB,EACL,IAAfA,EAAyB,OAA7B,+EAxFIL,EAAOU,EAAMC,GAGtB,IADA,IAAIkC,EAAc,EACT5B,EAAI,EAAGA,EAAIP,EAAMO,IACtB,IAAK,IAAIE,EAAI,EAAGA,EAAIR,EAAMQ,IAClBnB,EAAMiB,GAAGE,IAAI0B,IAIzB,OAAOA,IAAgBnC,EAAOC,uCAGrBX,EAAOP,EAAKJ,EAAK7D,GAAQ,IAG9ByF,EAFIH,EAAyBrE,KAAKY,MAA9ByD,qBAGJD,EAAY,EAGhB,IADAA,GAAapE,KAAKiG,mBAAmB1C,EAAOP,EAAKJ,EAAK7D,GACjDyF,EAAI5B,EAAK4B,EAAI5B,EAAMyB,EAAsBG,IAC1CJ,GAAapE,KAAKmG,mBAAmB5C,EAAOP,EAAKwB,EAAGzF,GAExD,IAAKyF,EAAI5B,EAAK4B,EAAI5B,EAAMyB,EAAsBG,IAC1CJ,GAAapE,KAAKqG,yBAAyB9C,EAAOP,EAAMwB,EAAI5B,EAAK4B,EAAGzF,GAExE,IAAKyF,EAAI5B,EAAK4B,EAAI5B,EAAMyB,EAAsBG,IAC1CJ,GAAapE,KAAKsG,yBAAyB/C,EAAOP,EAAMwB,EAAI5B,EAAK4B,EAAGzF,GAExE,OAAOwH,QAAQnC,oDASMb,EAAOP,EAAKJ,EAAK7D,GAItC,IAJ8C,IACtCsF,EAAyBrE,KAAKY,MAA9ByD,qBAEJ6B,EAAM,EACD1B,EAAI5B,EAAK4B,EAAI5B,EAAMyB,EAAsBG,IAC9C0B,GAAO3C,EAAMP,EAAMwB,EAAI5B,IAAQW,EAAMP,EAAMwB,EAAI5B,GAAK4B,KAAOzF,EAE/D,OAAOmH,IAAQ7B,mDAGMd,EAAOP,EAAKJ,EAAK7D,GAItC,IAJ8C,IACtCsF,EAAyBrE,KAAKY,MAA9ByD,qBAEJ6B,EAAM,EACD1B,EAAI5B,EAAK4B,EAAI5B,EAAMyB,EAAsBG,IAC9C0B,GAAO3C,EAAMP,EAAMwB,EAAI5B,IAAQW,EAAMP,EAAMwB,EAAI5B,GAAK4B,KAAOzF,EAE/D,OAAOmH,IAAQ7B,mCAqCV,IAAAmC,EAC+DxG,KAAKY,MAAjEE,EADH0F,EACG1F,cAAeyC,EADlBiD,EACkBjD,MAAOvC,EADzBwF,EACyBxF,QAASC,EADlCuF,EACkCvF,QAAS0C,EAD3C6C,EAC2C7C,IAAKC,EADhD4C,EACgD5C,WACrD,OACIvF,EAAAC,EAAAC,cAAA,WAASC,UAAU,cAEVsC,GACDzC,EAAAC,EAAAC,cAACkI,EAAD,CAAU9E,gBAAiB3B,KAAK2E,mBAIhC7D,GACAzC,EAAAC,EAAAC,cAACmI,EAAD,CACIhD,QAAS,CAAE1C,UAASC,WACpB0C,IAAKA,EACLC,WAAYA,EACZC,UAAW7D,KAAKsE,YAKpBxD,GACAzC,EAAAC,EAAAC,cAACoI,EAAD,CACIpD,MAAOA,EACPZ,cAAe3C,KAAK8E,kBACpB7B,aAAc,CACV2D,aAAc5F,EAAQvB,MACtBoH,aAAc5F,EAAQxB,iBAvMZgD,aCJvBqE,SCCG,WACd,OACIzI,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACfH,EAAAC,EAAAC,cAAA,4DACmDF,EAAAC,EAAAC,cAAA,WADnD,sGAEuGF,EAAAC,EAAAC,cAAA,WAFvG,4FAG6FF,EAAAC,EAAAC,cAAA,WAH7F,sEAIuEF,EAAAC,EAAAC,cAAA,WAJvE,mGAKoGF,EAAAC,EAAAC,cAAA,WALpG,wBCiBGwI,mLAdX,OACE1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,KACE3I,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0I,EAAD,MACA5I,EAAAC,EAAAC,cAAC2I,EAAA,EAAD,KACE7I,EAAAC,EAAAC,cAAC4I,EAAA,EAAD,CAAOC,KAAK,IAAIzI,OAAK,EAAC0I,UAAWrD,IACjC3F,EAAAC,EAAAC,cAAC4I,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWP,cAR1BrE,aCKE8D,QACW,cAA7Be,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtJ,EAAAC,EAAAC,cAACqJ,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.62cbc9b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './NavBar.scss';\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <NavLink to=\"/\">\r\n                <h1>\r\n                    <span className=\"circle\"></span>\r\n                    Four in <br />\r\n                    a Row</h1>\r\n            </NavLink>\r\n            <ul>\r\n                <li>\r\n                    <NavLink to=\"/\" exact activeClassName=\"active\">Home</NavLink>\r\n                </li>\r\n                <li>\r\n                    <NavLink to=\"/about\" activeClassName=\"active\">About</NavLink>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\nconst PlayerOpts = ({ player, handleChange, disabled }) => {\r\n    return (\r\n        <label>\r\n            <h2>Player {player.number}</h2>\r\n            <input type=\"text\"\r\n                value={player.name}\r\n                name=\"name\"\r\n                placeholder=\"Name\"\r\n                onChange={(ev) => handleChange(ev, player.number)}\r\n                disabled={disabled}\r\n            />\r\n\r\n            <input type=\"color\"\r\n                name=\"color\"\r\n                value={player.color}\r\n                onChange={(ev) => handleChange(ev, player.number)}\r\n            />\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default PlayerOpts;\r\n","import GameOpts from './GameOpts';\r\nexport default GameOpts;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserFriends, faLaptop } from '@fortawesome/free-solid-svg-icons';\r\nimport './GameOpts.scss';\r\nimport PlayerOpts from '../PlayerOpts/PlayerOpts';\r\n\r\nexport class GameOpts extends Component {\r\n    state = {\r\n        modeSelected: false,\r\n        optsSubmitted: false,\r\n        pcMode: true,\r\n        player1: { number: 1, name: '', color: '#38adb3' },\r\n        player2: { number: 2, name: 'Computer', color: '#d84726' },\r\n    }\r\n\r\n    handleChange = (ev, playerNum) => {\r\n        let player = playerNum === 1 ? 'player1' : 'player2';\r\n        this.setState({\r\n            ...this.state,\r\n            [player]: {\r\n                ...this.state[player],\r\n                [ev.target.name]: ev.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit = (ev) => {\r\n        ev.preventDefault();\r\n        if (!this.state.player1.name || !this.state.player2.name || (!this.state.pcMode && this.state.player2.name === 'Computer')) alert('Please enter valid player names');\r\n        else {\r\n            this.setState({ ...this.state, optsSubmitted: true });\r\n            let stateToEmit = {\r\n                pcMode: this.state.pcMode,\r\n                player1: this.state.player1,\r\n                player2: this.state.player2,\r\n                optsSubmitted: true\r\n            };\r\n            this.props.onOptsSubmitted(stateToEmit);\r\n        }\r\n    }\r\n    render() {\r\n        const { modeSelected, player1, player2, pcMode, optsSubmitted } = this.state;\r\n        return (\r\n            <div className=\"game-opts-container\">\r\n\r\n                {\r\n                    !modeSelected &&\r\n                    <div className=\"game-mode-container\">\r\n                        <button className=\"player-vs-player-btn\"\r\n                            onClick={() => this.setState({ ...this.state, pcMode: false, modeSelected: true })}>\r\n                            <FontAwesomeIcon icon={faUserFriends} />\r\n                        </button>\r\n                        <h2>2 Players</h2>\r\n\r\n                        <button className=\"player-vs-player-btn\"\r\n                            onClick={() => this.setState({ ...this.state, pcMode: true, modeSelected: true })}>\r\n                            <FontAwesomeIcon icon={faLaptop} />\r\n                        </button>\r\n                        <h2>Computer</h2>\r\n                    </div>\r\n                }\r\n\r\n                {\r\n                    modeSelected && !optsSubmitted &&\r\n                    <form className=\"game-opts\" onSubmit={this.handleSubmit}>\r\n\r\n                        <PlayerOpts player={player1} handleChange={this.handleChange} />\r\n                        <PlayerOpts player={player2} handleChange={this.handleChange}\r\n                            disabled={pcMode} />\r\n\r\n\r\n                        <button type=\"submit\">Save</button>\r\n                    </form>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameOpts;\r\n","import Cell from \"./Cell\";\r\nexport default Cell;","import React from 'react';\r\nimport './Cell.scss';\r\n\r\nconst Cell = ({ onCellClicked, col, color }) => {\r\n    return (\r\n        <td className=\"cell\" onClick={() => onCellClicked(col)}>\r\n            <div style={{ backgroundColor: color }} className={color === 'white' ? 'unmarked' : 'marked'}></div>\r\n            <div className={color === 'white' ? 'empty-cell shown' : 'empty-cell transparent'}></div>\r\n        </td>\r\n    )\r\n}\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport Cell from '../Cell';\r\n\r\nconst Row = ({ row, onCellClicked, playerColors }) => {\r\n\r\n    return (\r\n        <tr >\r\n            {row.map((cell, idx) => <Cell key={idx} onCellClicked={onCellClicked} col={idx} color={cell ? playerColors[`player${cell}Color`] : 'white'} />)}\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Row;\r\n","import GameBoard from './GameBoard';\r\nexport default GameBoard;","import React from 'react';\r\nimport Row from '../Row/Row';\r\nimport './GameBoard.scss';\r\n\r\nconst GameBoard = ({ board, onCellClicked, playerColors }) => {\r\n    return (\r\n        <table className=\"game-board\">\r\n            <tbody>\r\n                {board.map((row, idx) =>\r\n                    <Row key={idx}\r\n                        row={row}\r\n                        onCellClicked={onCellClicked}\r\n                        playerColors={playerColors}\r\n                    />)}\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default GameBoard\r\n","import GamePanel from './GamePanel';\r\nexport default GamePanel;","import React from 'react';\r\nimport './GamePanel.scss';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUserNinja, faRedo } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst GamePanel = ({ players, msg, currPlayer, onRestart }) => {\r\n    return (\r\n        <div className=\"game-panel\">\r\n\r\n            <h2 style={{ color: players.player1.color }}>\r\n                {players.player1.name}\r\n            </h2>\r\n\r\n            <h2 style={{ color: players.player2.color }}>\r\n                {players.player2.name}\r\n            </h2>\r\n\r\n            <button onClick={onRestart}>\r\n                <FontAwesomeIcon icon={faRedo} />\r\n            </button>\r\n\r\n            <h3 style={{ color: players[`player${currPlayer}`].color }}>\r\n                {players[`player${currPlayer}`].name}'s turn\r\n                <br />\r\n                <FontAwesomeIcon icon={faUserNinja} />\r\n            </h3>\r\n            {\r\n                msg &&\r\n                <h1>{msg}</h1>\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default GamePanel;\r\n","import React, { Component } from 'react';\r\nimport './GamePage.scss';   \r\nimport GameOpts from '../../components/GameOpts';\r\nimport GameBoard from '../../components/GameBoard';\r\nimport GamePanel from '../../components/GamePanel';\r\n\r\nexport default class GamePage extends Component {\r\n    state = {\r\n        rows: 6,\r\n        cols: 7,\r\n        player1: {},\r\n        player2: {},\r\n        pcMode: true,\r\n        optsSubmitted: false,\r\n        isGameOn: false,\r\n        isVictory: false,\r\n        board: [],\r\n        currPlayer: 1,\r\n        successionForVictory: 4,\r\n        msg: '',\r\n    }\r\n\r\n    initBoard = () => {\r\n        const { rows, cols } = this.state;\r\n        const board = this.createBoard(rows, cols);\r\n        this.setState({ ...this.state, board, currPlayer: 1, isGameOn: true, msg: '', isVictory: false });\r\n    }\r\n\r\n    createBoard = (rows, cols) => {\r\n        const board = [];\r\n        for (let i = 0; i < rows; i++) {\r\n            board.push([]);\r\n            for (let j = 0; j < cols; j++) {\r\n                board[i][j] = null;\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n\r\n    handleOptsSubmit = (opts) => {\r\n        this.setState({ ...this.state, ...opts })\r\n        setTimeout(() => {\r\n            this.initBoard();\r\n        }, 0);\r\n    }\r\n\r\n    handleCellClicked = (col) => {\r\n        this.setState({ ...this.state })\r\n        let copyBoard = JSON.parse(JSON.stringify(this.state.board));\r\n\r\n        let row = this.findFreeRow(copyBoard, col);\r\n        if (row >= 0 && !copyBoard[row][col] && !this.state.isVictory && this.state.isGameOn) {\r\n\r\n            copyBoard[row][col] = this.state.currPlayer;\r\n\r\n            let nextPlayer = this.togglePlayer(this.state.currPlayer);\r\n\r\n            const isVictory = this.checkVictory(copyBoard, row, col, this.state.currPlayer);\r\n            if (isVictory) {\r\n                const winningPlayer = this.state.currPlayer === 1 ? this.state.player1 : this.state.player2;\r\n                \r\n                this.setState({\r\n                    ...this.state,\r\n                    board: copyBoard,\r\n                    isGameOn: false,\r\n                    isVictory: true,\r\n                    msg: `🏆Player ${winningPlayer.number} - ${winningPlayer.name} wins!🏆`\r\n                });\r\n\r\n            } else {\r\n                const isGameTied = this.checkGameTie(copyBoard, this.state.rows, this.state.cols);\r\n                if (isGameTied) {\r\n                    this.setState({ ...this.state, isGameOn: false, isVictory: false, msg: 'Game is tied!' });\r\n                } else {\r\n                    this.setState({ ...this.state, board: copyBoard, currPlayer: nextPlayer });\r\n\r\n                    if (nextPlayer === 2 && this.state.pcMode) {\r\n                        setTimeout(() => {\r\n                            let randomInt = this.getRandomIntInclusive(0, this.state.cols - 1);\r\n                            this.handleCellClicked(randomInt);\r\n                        }, 500);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    checkGameTie(board, rows, cols) {\r\n\r\n        let filledCells = 0;\r\n        for (let i = 0; i < rows; i++) {\r\n            for (let j = 0; j < cols; j++) {\r\n                if (board[i][j]) filledCells++;\r\n            }\r\n        }\r\n\r\n        return filledCells === rows * cols;\r\n    }\r\n\r\n    checkVictory(board, row, col, player) {\r\n        const { successionForVictory } = this.state;\r\n\r\n        let i;\r\n        let isVictory = 0;\r\n\r\n        isVictory += this.checkSuccessionCol(board, row, col, player);\r\n        for (i = col; i > col - successionForVictory; i--) {\r\n            isVictory += this.checkSuccessionRow(board, row, i, player);\r\n        }\r\n        for (i = col; i > col - successionForVictory; i--) {\r\n            isVictory += this.checkSuccessionDiagonal1(board, row + i - col, i, player);\r\n        }\r\n        for (i = col; i > col - successionForVictory; i--) {\r\n            isVictory += this.checkSuccessionDiagonal2(board, row - i + col, i, player);\r\n        }\r\n        return Boolean(isVictory);\r\n    }\r\n\r\n    getRandomIntInclusive = (min, max) => {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    checkSuccessionDiagonal1(board, row, col, player) {\r\n        const { successionForVictory } = this.state;\r\n\r\n        let res = 0;\r\n        for (let i = col; i < col + successionForVictory; i++) {\r\n            res += board[row + i - col] && board[row + i - col][i] === player;\r\n        }\r\n        return res === successionForVictory;\r\n    }\r\n\r\n    checkSuccessionDiagonal2(board, row, col, player) {\r\n        const { successionForVictory } = this.state;\r\n\r\n        let res = 0;\r\n        for (let i = col; i < col + successionForVictory; i++) {\r\n            res += board[row - i + col] && board[row - i + col][i] === player;\r\n        }\r\n        return res === successionForVictory;\r\n    }\r\n\r\n    checkSuccessionCol = (board, row, col, player) => {\r\n        const { successionForVictory } = this.state;\r\n\r\n        let res = 0;\r\n        for (let i = row; i < row + successionForVictory; i++) {\r\n            res += board[i] && board[i][col] === player;\r\n        }\r\n        return res === successionForVictory;\r\n    }\r\n\r\n    checkSuccessionRow = (board, row, col, player) => {\r\n        const { successionForVictory } = this.state;\r\n        let res = 0;\r\n        for (let i = col; i < col + successionForVictory; i++) {\r\n            res += board[row] && board[row][i] === player;\r\n        }\r\n        return res === successionForVictory;\r\n    }\r\n\r\n    findFreeRow = (board, col) => {\r\n\r\n        let { rows } = this.state;\r\n        rows -= 1;\r\n        while (board[rows][col] && rows > 0) {\r\n            rows--\r\n        };\r\n        return rows;\r\n    }\r\n\r\n    togglePlayer = (currPlayer) => {\r\n        if (currPlayer === 1) return 2;\r\n        else if (currPlayer === 2) return 1;\r\n    }\r\n\r\n    render() {\r\n        const { optsSubmitted, board, player1, player2, msg, currPlayer } = this.state;\r\n        return (\r\n            <section className=\"game-page\">\r\n                {\r\n                    !optsSubmitted &&\r\n                    <GameOpts onOptsSubmitted={this.handleOptsSubmit} />\r\n                }\r\n\r\n                {\r\n                    optsSubmitted &&\r\n                    <GamePanel\r\n                        players={{ player1, player2 }}\r\n                        msg={msg}\r\n                        currPlayer={currPlayer}\r\n                        onRestart={this.initBoard}\r\n                    />\r\n                }\r\n\r\n                {\r\n                    optsSubmitted &&\r\n                    <GameBoard\r\n                        board={board}\r\n                        onCellClicked={this.handleCellClicked}\r\n                        playerColors={{\r\n                            player1Color: player1.color,\r\n                            player2Color: player2.color\r\n                        }} />\r\n                }\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","import AboutPage from \"./AboutPage\";\r\n\r\nexport default AboutPage;","import React from 'react';\r\nimport './AboutPage.scss';\r\n\r\nconst AboutPage = () => {\r\n    return (\r\n        <section className=\"about-page\">\r\n            <h2>\r\n                Hi, I'm Bar Peled and I'm a fan of Board Games!<br />\r\n                My professional time is normally spent developing advanced Full Stack progressive web applications.<br />\r\n                I specialize developing in HTML5, CSS3, Sass, JavaScript, React, Vue, Angular and jQuery.<br />\r\n                I also develop using Node.JS, MongoDB, Firebase, MySQL and GraphQL.<br />\r\n                My free time, on the other hand, is usually spent on the dance floor, practicing my Salsa steps.<br />\r\n                Happy to connect!\r\n            </h2>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AboutPage;\r\n\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport NavBar from './components/NavBar/NavBar';\nimport GamePage from './pages/GamePage/GamePage';\nimport AboutPage from './pages/AboutPage';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <NavBar />\n          <Switch>\n            <Route path=\"/\" exact component={GamePage} />\n            <Route path=\"/about\" component={AboutPage} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}